% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynfever_functions.R
\name{dynfever_toLong}
\alias{dynfever_toLong}
\title{Long-Format Dynamical Fever Output}
\usage{
dynfever_toLong(dynfever_output)
}
\arguments{
\item{dynfever_output}{the output of [dynfever_simulate()] and [dynfever_sample()];
either the full list, with elements `states` and `params`, both
`data.table`s; or directly one of those two elements. If the input is already
in long format, it will be returned unchanged. See [dynfever_simulate()] and
[dynfever_sample()] for the base output formats}
}
\value{
depending on input:
 - if given a list, return a list with elements `states` and `params`, both
`data.table`s,
 - if given a `data.table`, return a `data.table`

In both cases, the `data.table`(s) have the keys of their input: optionally
`sample` (when given output from [dynfever_sample()], always `time` and
`pop`, then `state` (for `states` output) or `param` (for `params` output)
}
\description{
Reformat [dynfever_simulate()] and [dynfever_sample()] output
to "long" format.
}
\examples{
require(data.table)
dyn_one <- dynfever_simulate()
dyn_run <- dynfever_sample(n=10)

one_long <- dynfever_toLong(dyn_one)
one_long
# also works for just e.g. states:
one_long_states <- dynfever_toLong(dyn_one$states)
all(one_long$states == one_long_states)
# and for multiple samples:
run_long <- dynfever_toLong(dyn_one)
run_long
# note preservation of keys:
key(one_long$states)
key(run_long$states)

}
